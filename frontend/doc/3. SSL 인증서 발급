1. AWS Certificate Manager (ACM) SSL 인증서 발급 (DNS 인증)
1-1. 인증서 요청
aws acm request-certificate \
  --domain-name abuts.fit \
  --validation-method DNS \
  --subject-alternative-names www.abuts.fit \
  --region us-east-1
✅ 반드시 --region us-east-1 (버지니아 북부) 로 해야 합니다. CloudFront는 전세계 공통 리전이기 때문입니다.

1-2. 인증서 ARN 기록해두기
출력된 결과에 "CertificateArn": "arn:aws:acm:..." 형태가 나와요.
→ 이걸 메모해둬야 합니다.

"CertificateArn": "arn:aws:acm:us-east-1:106055905364:certificate/1d56708e-e803-4b78-87e1-b0546b2380fc"

1-3. 인증에 필요한 CNAME 값 가져오기
aws acm describe-certificate \
  --certificate-arn "arn:aws:acm:us-east-1:106055905364:certificate/1d56708e-e803-4b78-87e1-b0546b2380fc" \
  --region us-east-1
출력 중 DomainValidationOptions 안에 ResourceRecord 항목이 나옵니다:

1-4. Route 53에 CNAME 레코드 등록 (DNS 인증)
aws route53 change-resource-record-sets \
  --hosted-zone-id Z0070040387JJQBR7DLBD \
  --change-batch file://doc/validate-certificate.json

validate-certificate.json 예시

{
  "Comment": "Add CNAME to validate ACM certificate",
  "Changes": [
    {
      "Action": "UPSERT",
      "ResourceRecordSet": {
        "Name": "_57e4e788b3ede66b0f4e591414017745.abuts.fit.",
        "Type": "CNAME",
        "ResourceRecords": [
          {
            "Value": "_96d87169bf3348f975c7b191a6b0b0ec.xlfgrmvvlj.acm-validations.aws."
          }
        ]
      }
    },
    {
      "Action": "UPSERT",
      "ResourceRecordSet": {
        "Name": "_a849223ea41ff85321619961c60af0e9.www.abuts.fit.",
        "Type": "CNAME",
        "ResourceRecords": [
          {
            "Value": "_03cf30bbbd124321309f0325e6a16056.xlfgrmvvlj.acm-validations.aws."
          }
        ]
      }
    }
  ]
}
✅ Name, Value는 describe-certificate 출력값에 맞게 바꿔주세요!

1-5. 인증서 상태 확인
aws acm describe-certificate \
  --certificate-arn "arn:aws:acm:us-east-1:106055905364:certificate/1d56708e-e803-4b78-87e1-b0546b2380fc" \
  --region us-east-1
"Status": "ISSUED" 되면 완료.

2. CloudFront 배포 생성
2-1. 기본 설정 파일 작성 (ex: create-distribution.json)
{
  "CallerReference": "abuts-fit-$(date +%s)",
  "Aliases": {
    "Quantity": 1,
    "Items": ["abuts.fit"]
  },
  "DefaultRootObject": "index.html",
  "Origins": {
    "Quantity": 1,
    "Items": [
      {
        "Id": "S3-abuts-fit",
        "DomainName": "abuts.fit.s3-website.ap-south-1.amazonaws.com",
        "CustomOriginConfig": {
          "HTTPPort": 80,
          "HTTPSPort": 443,
          "OriginProtocolPolicy": "http-only"
        }
      }
    ]
  },
  "DefaultCacheBehavior": {
    "TargetOriginId": "S3-abuts-fit",
    "ViewerProtocolPolicy": "redirect-to-https",
    "TrustedSigners": {
      "Enabled": false,
      "Quantity": 0
    },
    "ForwardedValues": {
      "QueryString": false,
      "Cookies": {
        "Forward": "none"
      }
    }
  },
  "ViewerCertificate": {
    "ACMCertificateArn": "arn:aws:acm:us-east-1:106055905364:certificate/1d56708e-e803-4b78-87e1-b0546b2380fc",
    "SSLSupportMethod": "sni-only",
    "MinimumProtocolVersion": "TLSv1.2_2021"
  },
  "Enabled": true
}
✅ [CertificateArn] 은 앞에서 발급한 인증서 ARN으로 교체!

2-2. CloudFront 배포 생성 명령어
aws cloudfront create-distribution \
  --distribution-config file://doc/create-distribution.json
결과에 DomainName (예: d1234abcd.cloudfront.net) 나옵니다. 기록!
"DomainName": "d3nxonwfndkuq9.cloudfront.net",

3. Route 53 A 레코드 연결
3-1. Route 53 A 레코드 수정
aws route53 change-resource-record-sets \
  --hosted-zone-id Z0070040387JJQBR7DLBD \
  --change-batch file://doc/update-a-record.json
update-a-record.json 예시

{
  "Comment": "Alias abuts.fit to CloudFront",
  "Changes": [
    {
      "Action": "UPSERT",
      "ResourceRecordSet": {
        "Name": "abuts.fit",
        "Type": "A",
        "AliasTarget": {
          "HostedZoneId": "Z11RGJOFQNVJUP",
          "DNSName": "d3nxonwfndkuq9.cloudfront.net.",
          "EvaluateTargetHealth": false
        }
      }
    }
  ]
}
Z2FDTNDATAQYW2 : CloudFront 고정 HostedZoneId (항상 이거!)

DNSName : CloudFront 생성시 나온 도메인.

📍 전체 흐름 정리
ACM 발급 → DNS 인증 (Route53)

CloudFront 배포 생성 → S3 연결

Route53 A 레코드 CloudFront로 연결

끝!

🔥 주의할 점
CloudFront 생성/배포에 10~30분 정도 걸릴 수 있어요.

CloudFront Distribution 활성화 완료되면 바로 HTTPS 접속 가능!


S3 + CloudFront 배포 환경에서 코드 배포 후 **CloudFront 캐시 무효화(invalidation)**를 해주면,
최신 파일이 즉시 반영되어 Mixed Content 등 이전 코드로 인한 문제가 해결됩니다.

# CloudFront 캐시 무효화
aws cloudfront create-invalidation \
  --distribution-id E2CEDBBNSXCSGZ \
  --paths "/*"